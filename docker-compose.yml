version: '3'

services:
  broker:
    image: redis:5
    ports:
      - '6379:6379'
  # reverse-proxy:
  #   image: traefik:v2.2
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./traefik.toml:/traefik.toml
  #     - ./acme.json:/acme.json
  nginx:
    build:
      context: ./nginx
    volumes:
      - images_volume:/home/app/web/images
      - data_volume:/home/app/web/data
    ports:
      - "8080:80"
    depends_on:
      - web
    # labels:
    #   - traefik.http.routers.datathon-http.entrypoints=insecure
    #   - traefik.http.routers.datathon-http.rule=Host(`gpuvm1v100.eastus.cloudapp.azure.com`)
    #   - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
    #   - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
    #   - traefik.http.routers.datathon-http.middlewares=https-redirect@docker
    #   - traefik.http.routers.datathon-https.entrypoints=secure
    #   - traefik.http.routers.datathon-https.rule=Host(`gpuvm1v100.eastus.cloudapp.azure.com`)
    #   - traefik.http.routers.datathon-https.tls=true
    #   - traefik.http.routers.datathon-https.tls.certresolver=letsencrypt
  segmentation:
    build:
      context: ./segmentation
    environment:
      REDIS_HOST: broker
    depends_on:
      - broker
  web:
    build: .
    command: pipenv run python api.py
    environment:
      REDIS_HOST: broker
    volumes:
      - images_volume:/home/app/web/images
    expose:
      - 8000
    depends_on:
      - broker

volumes:
  images_volume:
  data_volume:
